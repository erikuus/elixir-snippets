<snippet>
	<content><![CDATA[
defmodule ${1:NameSpaceWeb}.${2:NavigationCreate}Live do
  use ${1:NameSpaceWeb}, :live_view

  alias ${3:NameSpace}.${4:Context}
  alias ${3:NameSpace}.${4:Context}.${5:Schema}

  def mount(_params, _session, socket) do
    ${6:struct}s = ${4:Context}.list_${6:struct}s()

    socket =
      assign(socket,
        ${6:struct}s: ${6:struct}s,
        selected_${6:struct}: hd(${6:struct}s)
      )

    {:ok, socket}
  end

  def handle_params(%{"id" => id}, _url, socket) do
    id = String.to_integer(id)

    ${6:struct} = ${4:Context}.get_${6:struct}!(id)

    socket =
      assign(socket,
        selected_${6:struct}: ${6:struct},
        page_title: "View #{${6:struct}.name}"
      )

    {:noreply, socket}
  end

  def handle_params(_params, _url, socket) do
    # Note that you have to add route:
    # live "/navigation/new", ${2:NavigationCreate}Live, :new
    if(socket.assigns.live_action == :new) do
      changeset = ${4:Context}.change_${6:struct}(%${5:Schema}{})

      socket =
        assign(socket,
          selected_${6:struct}: nil,
          changeset: changeset
        )

      {:noreply, socket}
    else
      {:noreply, socket}
    end
  end

  def render(assigns) do
    ~L"""
    <h1>Servers</h1>
    <nav>
      <%= live_patch "Add",
        to: Routes.${7:navigation}_path(@socket, :new),
        class: "button" %>
      <%= for ${6:struct} <- @${6:struct}s do %>
        <div>
          <%= live_patch link_body(${6:struct}),
                to: Routes.live_path(
                          @socket,
                          __MODULE__,
                          id: ${6:struct}.id
                    ),
                class: if ${6:struct} == @selected_${6:struct}, do: "active" %>
        </div>
      <% end %>
    </nav>
    <main>
      <%= if(@live_action == :new) do %>
        <%= f = form_for @changeset, "#", phx_submit: "save" %>
          <div class="field">
            <%= label f, :name %>
            <%= text_input f, :name %>
            <%= error_tag f, :name %>
          </div>
          <div class="field">
            <%= label f, :size %>
            <%= text_input f, :size %>
            <%= error_tag f, :size %>
          </div>
          <div class="field">
            <%= submit "Save", phx_disable_with: "Saving ..." %>
          </div>
        </form>
      <% else %>
        <h2><%= @selected_${6:struct}.name %></h2>
        <div><%= @selected_${6:struct}.size %></div>
      <% end %>
    </main>
    """
  end

  def handle_event("save", %{"${6:struct}" => params}, socket) do
    case ${4:Context}.create_${6:struct}(params) do
      {:ok, ${6:struct}} ->
        socket = update(socket, :${6:struct}s, &[${6:struct} | &1])

        socket =
          push_patch(socket,
            to: Routes.live_path(socket, __MODULE__, id: ${6:struct}.id)
          )

        {:noreply, socket}

      {:error, %Ecto.Changeset{} = changeset} ->
        socket = assign(socket, changeset: changeset)
        {:noreply, socket}
    end
  end

  defp link_body(${6:struct}) do
    assigns = %{name: ${6:struct}.name}

    ~L"""
    <img src="/images/${6:struct}.svg">
    <%= @name %>
    """
  end
end

]]></content>
  <tabTrigger>pxlvModuleNavigationCreate</tabTrigger>
	<scope>source.elixir</scope>
	<description>- Live view navigation and create module template (defmodule)</description>
</snippet>