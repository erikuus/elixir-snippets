<snippet>
	<content><![CDATA[
defmodule ${1:NameSpaceWeb}.${2:InfiniteScrolling}Live do
  use ${1:NameSpaceWeb}, :live_view

  alias ${3:NameSpace}.${4:Context}

  def mount(_params, _session, socket) do
    socket =
      socket
      |> assign(page: 1, per_page: 10)
      |> load_items()

    {:ok, socket, temporary_assigns: [items: []]}
  end

  defp load_items(socket) do
    assign(socket,
      orders:
        ${4:Context}.list_${5:struct}s(
          page: socket.assigns.page,
          per_page: socket.assigns.per_page
        )
    )
  end

  def render(assigns) do
    ~L"""
    <div id="infinite-scroll">
      <h1>Infinite Scrolling</h1>
      <div id="orders" phx-update="append">
        <%= for ${5:struct} <- @${5:struct}s do %>
          <div id="<%= ${5:struct}.id %>">
              <%= ${5:struct}.name %>
          </div>
        <% end %>
      </div>
      <div id="footer" phx-hook="InfiniteScroll" data-page="<%= @page %>">
        <div class="loader">
          Loading more ...
        </div>
      </div>
    </div>
    """
  end

  def handle_event("load-more", _, socket) do
    socket =
      socket
      |> update(:page, &(&1 + 1))
      |> load_items()

    {:noreply, socket}
  end
end
]]></content>
  <tabTrigger>pxlvModuleInfiniteScrolling</tabTrigger>
	<scope>source.elixir</scope>
	<description>- Live view infinite scrolling module template (defmodule)</description>
</snippet>