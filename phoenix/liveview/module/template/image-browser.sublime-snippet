<snippet>
	<content><![CDATA[
defmodule ${1:NameSpaceWeb}.${2:ImageBrowser}Live do
  use ${1:NameSpaceWeb}, :live_view

  def mount(_params, _session, socket) do
    {:ok,
     assign(socket,
       images: Enum.map(0..18, &"image-#{&1}.jpg"),
       current: 0,
       loop: false
     )}
  end

  def render(assigns) do
    ~L"""
    <h1>Image browser</h1>
    <div id="key-events" phx-window-keyup="update">
      <img src="/images/juggling/<%= Enum.at(@images, @current) %>">
      <div class="status">
        <%= Enum.at(@images, @current) %>
        <input type="number" value="<%= @current %>"
          phx-keyup="select"
          phx-key="Enter" />
      </div>

    </div>
    """
  end

  def handle_event("select", %{"key" => "Enter", "value" => value}, socket) do
    socket = assign(socket, current: String.to_integer(value))
    {:noreply, socket}
  end

  def handle_event("update", %{"key" => "ArrowRight"}, socket) do
    socket = assign(socket, current: next(socket))
    {:noreply, socket}
  end

  def handle_event("update", %{"key" => "ArrowLeft"}, socket) do
    socket = assign(socket, current: previous(socket))
    {:noreply, socket}
  end

  def handle_event("update", %{"key" => "k"}, socket) do
    socket = assign(socket, loop: !socket.assigns.loop)
    play_loop(socket)
    {:noreply, socket}
  end

  def handle_event("update", %{"key" => key}, socket) do
    {:noreply, socket}
  end

  def handle_info(:next, socket) do
    socket = assign(socket, current: next(socket))
    play_loop(socket)
    {:noreply, socket}
  end

  defp play_loop(socket) do
    if socket.assigns.loop == true do
      Process.send_after(self(), :next, 250)
    end
  end

  defp next(socket) do
    rem(
      socket.assigns.current + 1,
      Enum.count(socket.assigns.images)
    )
  end

  defp previous(socket) do
    rem(
      socket.assigns.current - 1 + Enum.count(socket.assigns.images),
      Enum.count(socket.assigns.images)
    )
  end
end
]]></content>
  <tabTrigger>pxlvModuleImageBrowser</tabTrigger>
	<scope>source.elixir</scope>
	<description>- Live view (key events) image browser module template (defmodule)</description>
</snippet>