<snippet>
	<content><![CDATA[
defmodule ${1:NameSpaceWeb}.${2:Upload}Live do
  use ${1:NameSpaceWeb}, :live_view

  alias ${3:NameSpace}.${4:Context}
  alias ${3:NameSpace}.${4:Context}.${5:Schema}

  @s3_bucket "${6:my-s3-bucket}"

  def mount(_params, _session, socket) do
    if connected?(socket), do: ${4:Context}.subscribe()

    ${7:struct}s = ${4:Context}.list_${7:struct}s()
    changeset = ${4:Context}.change_${7:struct}(%${5:Schema}{})

    socket =
      assign(socket,
        ${7:struct}s: ${7:struct}s,
        changeset: changeset
      )

    socket =
      allow_upload(
        socket,
        :photo,
        accept: ~w(.jpg .png),
        max_entries: 3,
        max_file_size: 10_000_000,
        external: &generate_metadata/2
      )

    {:ok, socket, temporary_assigns: [${7:struct}s: []]}
  end

  def render(assigns) do
    ~L"""
    <%= f = form_for @changeset, "#",
          id: "create-${7:struct}",
          phx_submit: "save",
          phx_change: "validate" %>

      <%= text_input f, :name, placeholder: "Name" %>
      <%= error_tag f, :name %>

      <div class="drop" phx-drop-target="<%= @uploads.photo.ref %>">
        <div>
          <img src="/images/upload.svg">
          <div>
            <label for="<%= @uploads.photo.ref %>">
              <span>Upload a file</span>
              <%= live_file_input @uploads.photo, class: "sr-only" %>
            </label>
            <span>or drag and drop</span>
          </div>
          <p>
            <%= @uploads.photo.max_entries %> photos max,
            up to <%= trunc(@uploads.photo.max_file_size / 1_000_000) %> MB each
          </p>
        </div>
      </div>

      <%= for err <- upload_errors(@uploads.photo) do %>
        <div class="error">
          <%= handle_upload_error(err) %>
        </div>
      <% end %>

      <%= for entry <- @uploads.photo.entries do %>
        <div class="entry">
          <%= live_img_preview entry %>

          <div class="progress">
            <div class="value">
              <%= entry.progress %>%
            </div>
            <div class="bar">
              <span style="width:<%= entry.progress %>%"></span>
            </div>
          </div>

          <a href="#" phx-click="cancel" phx-value-ref="<%= entry.ref %>">
            &times;
          </a>

          <%= for err <- upload_errors(@uploads.photo, entry) do %>
            <div class="error">
              <%= handle_upload_error(err) %>
            </div>
          <% end %>
        </div>
      <% end %>

      <div class="hint">
        You can upload <%= @uploads.photo.max_entries %> photos
        <%= trunc(@uploads.photo.max_file_size / 1_000_000) %> MB each.
      </div>

      <%= submit "Upload", phx_disable_with: "Uploading..." %>

    </form>

    <div id="photos" phx-update="prepend">
      <%= for ${7:struct} <- @${7:struct}s do %>
        <%= for {photo_url, index} <- Enum.with_index(${7:struct}.photo_urls) do %>
          <div class="photo" id="<%= ${7:struct}.id %>-<%= index %>">
            <img src="<%= photo_url %>">
            <div class="name">
              <%= ${7:struct}.name %> (<%= index + 1 %>)
            </div>
          </div>
        <% end %>
      <% end %>
    </div>
    """
  end

  def handle_event("cancel", %{"ref" => ref}, socket) do
    socket = cancel_upload(socket, :photo, ref)
    {:noreply, socket}
  end

  @doc """
  ## Requires in context module:

    def create_${7:struct}(%${5:Schema}{} = ${7:struct}, attrs \\ %{}, fun) do
      ${7:struct}
      |> ${5:Schema}.changeset(attrs)
      |> Repo.insert()
      |> after_save(fun)
      |> broadcast(:${7:struct}_created)
    end

    def after_save({:ok, ${7:struct}}, fun) do
      {:ok, _${7:struct}} = fun.(${7:struct})
    end

    def after_save(error, _fun), do: error

  """
  def handle_event("save", %{"${7:struct}" => params}, socket) do
    {completed, []} = uploaded_entries(socket, :photo)

    urls =
      for entry <- completed do
        Path.join(s3_url(), filename(entry))
      end

    ${7:struct} = %${5:Schema}{photo_urls: urls}

    case ${4:Context}.create_${7:struct}(${7:struct}, params, &consume_photos(socket, &1)) do
      {:ok, _${7:struct}} ->
        changeset = ${4:Context}.change_${7:struct}(%${5:Schema}{})
        {:noreply, assign(socket, changeset: changeset)}

      {:error, %Ecto.Changeset{} = changeset} ->
        {:noreply, assign(socket, changeset: changeset)}
    end
  end

  def handle_event("validate", %{"${7:struct}" => params}, socket) do
    changeset =
      %${5:Schema}{}
      |> ${4:Context}.change_${7:struct}(params)
      |> Map.put(:action, :insert)

    {:noreply, assign(socket, changeset: changeset)}
  end

  def handle_info({:${7:struct}_created, ${7:struct}}, socket) do
    {:noreply, update(socket, :${7:struct}s, fn ${7:struct}s -> [${7:struct} | ${7:struct}s] end)}
  end

  def consume_photos(socket, ${7:struct}) do
    consume_uploaded_entries(socket, :photo, fn _meta, _entry ->
      :ok
    end)

    {:ok, ${7:struct}}
  end

  @doc """
  Requires:

    ## app.js

    import Uploaders from "./uploaders";

    let liveSocket = new LiveSocket("/live", Socket, {
      uploaders: Uploaders,
      ...
    });

    ## uploaders.js

    let Uploaders = {}

    Uploaders.S3 = function (entries, onViewError) {
      entries.forEach(entry => {
        let formData = new FormData()
        let { url, fields } = entry.meta
        Object.entries(fields).forEach(([key, val]) => formData.append(key, val))
        formData.append("file", entry.file)
        let xhr = new XMLHttpRequest()
        onViewError(() => xhr.abort())
        xhr.onload = () => xhr.status === 204 || entry.error()
        xhr.onerror = () => entry.error()
        xhr.upload.addEventListener("progress", (event) => {
          if (event.lengthComputable) {
            let percent = Math.round((event.loaded / event.total) * 100)
            entry.progress(percent)
          }
        })

        xhr.open("POST", url, true)
        xhr.send(formData)
      })
    }

    export default Uploaders;

  """
  defp generate_metadata(entry, socket) do
    config = %{
      region: "${8:eu-north-1}",
      access_key_id: System.fetch_env!("AWS_ACCESS_KEY_ID"),
      secret_access_key: System.fetch_env!("AWS_SECRET_ACCESS_KEY")
    }

    {:ok, fields} =
      SimpleS3Upload.sign_form_upload(config, @s3_bucket,
        key: filename(entry),
        content_type: entry.client_type,
        max_file_size: socket.assigns.uploads.photo.max_file_size,
        expires_in: :timer.hours(1)
      )

    metadata = %{
      uploader: "S3",
      key: filename(entry),
      url: s3_url(),
      fields: fields
    }

    {:ok, metadata, socket}
  end

  defp s3_url, do: "//#{@s3_bucket}.s3.eu-north-1.amazonaws.com"

  def filename(entry) do
    [ext | _] = MIME.extensions(entry.client_type)
    "#{entry.uuid}.#{ext}"
  end

  def handle_upload_error(:too_large),
    do: "File too large (max 10 MB)."

  def handle_upload_error(:too_many_files),
    do: "You've selected too many files."

  def handle_upload_error(:not_accepted),
    do: "You've selected an unacceptable file type."
end
]]></content>
  <tabTrigger>pxlvModuleUploadFileS3</tabTrigger>
	<scope>source.elixir</scope>
	<description>- Live view file S3 upload template (defmodule)</description>
</snippet>