<snippet>
	<content><![CDATA[
use $TM_NAMESPACE_WEB, :live_view

import $TM_NAMESPACE.UiComponent

alias $TM_NAMESPACE.${1:Context}

def mount(_params, _session, socket) do
  socket =
    assign(
      socket,
      query: nil,
      results: [],
      loading: false
    )

  {:ok, socket}
end

def render(assigns) do
  ~L"""
  <h1>Find</h1>
  <form phx-submit="search">
    <input
      type="text"
      name="query"
      autofocus
      autocomplete="off"
      placeholder="Query"
      value="<%= @query %>"
      <%= if @loading, do: "readonly" %>
    />
    <button>
      <img src="images/search.svg">
    </button>
  </form>
  <%= if @loading do %>
  <div class="loader">
    Loading ...
  </div>
  <% end %>
  <div class="results">
    <%= for result <- @results do %>
      <%= result.name %>
    <% end %>
  </div>
  """
end

def handle_event("search", %{"query" => query}, socket) do
  send(self(), {:find, query})

  socket =
    assign(
      socket,
      query: nil,
      results: [],
      loading: true
    )

  {:noreply, socket}
end

def handle_info({:find, query}, socket) do
  case ${1:Context}.find(query) do
    [] ->
      socket =
        socket
        |> put_flash(:info, "No results for \"#{query}\"")
        |> assign(
          results: [],
          loading: false
        )

      {:noreply, socket}

    results ->
      socket =
        socket
        |> clear_flash()
        |> assign(
          results: results,
          loading: false
        )

      {:noreply, socket}
  end
end
]]></content>
  <tabTrigger>.live-view-search</tabTrigger>
  <scope>source.elixir</scope>
  <description>- Live view search module template</description>
</snippet>