<snippet>
	<content><![CDATA[
defmodule ${1:NameSpaceWeb}.${2:Paginate}Live do
  use ${1:NameSpaceWeb}, :live_view

  alias ${3:NameSpace}.${4:Context}

  def mount(_params, _session, socket) do
    {:ok, socket, temporary_assigns: [${4:rows}: []]}
  end

  def handle_params(params, _url, socket) do
    page = String.to_integer(params["page"] || "1")
    per_page = String.to_integer(params["per_page"] || "5")
    sort_by = (params["sort_by"] || "id") |> String.to_atom()
    sort_order = (params["sort_order"] || "asc") |> String.to_atom()

    paginate_options = %{page: page, per_page: per_page}
    sort_options = %{sort_by: sort_by, sort_order: sort_order}

    ${5:struct}s =
      ${4:Context}.list_{5:struct}s(
        paginate: paginate_options,
        sort: sort_options
      )
    count_${5:struct}s = ${4:Context}.count_${5:struct}s()

    socket =
      assign(socket,
        options: Map.merge(paginate_options, sort_options),
        ${5:struct}s: ${5:struct}s,
        count_${5:struct}s: count_${5:struct}s
      )

    {:noreply, socket}
  end

  def render(assigns) do
    ~L"""
      <h1>Pagination</h1>
      <form phx-change="select-per-page">
         Show
         <select name="per_page">
          <%= options_for_select([5, 10, 15, 20], @options.per_page) %>
        </select>
        <label for="per_page">per page</label>
      </form>
      <table>
          <%= for ${5:struct} <- @${5:struct}s do %>
          <tr>
            <td>
              <%= sort_link(@socket, ${5:struct}.column1, :column1, @options) %>
            </td>
            <td>
              <%= sort_link(@socket, ${5:struct}.column2, :column2, @options) %>
            </td>
            <td>
              <%= sort_link(@socket, ${5:struct}.column3, :column3, @options) %>
            </td>
          </tr>
          <% end %>
      </table>
      <div class="pagination">
        <%= if(@options.page > 1) do %>
          <%= navigation_link(@socket, "Prev", @options.page - 1, @options, "previous") %>
        <% end %>
        <%= for i <- (@options.page - 2)..(@options.page + 2), i > 0 do %>
          <%= if i <= ceil(@count_${5:struct}s / @options.per_page) do %>
            <%= navigation_link(@socket, i, i, @options, (if @options.page == i, do: "active")) %>
          <% end %>
        <% end %>
        <%= if(@options.page * @options.per_page < @count_${5:struct}s) do %>
          <%= navigation_link(@socket, "Next", @options.page + 1, @options, "next") %>
        <% end %>
      </div>
    """
  end

  def handle_event("select-per-page", %{"per-page" => per_page}, socket) do
    per_page = String.to_integer(per_page)

    socket =
      push_patch(socket,
        to:
          Routes.live_path(
            socket,
            __MODULE__,
            page: socket.assigns.options.page,
            per_page: per_page,
            sort_by: socket.assigns.options.sort_by,
            sort_order: socket.assigns.options.sort_order
          )
      )

    {:noreply, socket}
  end

  defp pagination_link(socket, text, page, options, class) do
    live_patch(text,
      to:
        Routes.live_path(
          socket,
          __MODULE__,
          page: page,
          per_page: options.per_page,
          sort_by: options.sort_by,
          sort_order: options.sort_order
        ),
      class: class
    )
  end

  defp sort_link(socket, text, sort_by, options) do
    text =
      if(options.sort_by == sort_by) do
        text <> " " <> display_sort_order(options.sort_order)
      else
        text
      end

    live_patch(text,
      to:
        Routes.live_path(
          socket,
          __MODULE__,
          page: options.page,
          per_page: options.per_page,
          sort_by: sort_by,
          sort_order: switch_sort_order(options.sort_order)
        )
    )
  end

  defp switch_sort_order(:asc), do: :desc
  defp switch_sort_order(:desc), do: :asc

  defp display_sort_order(:asc), do: "▲"
  defp display_sort_order(:desc), do: "▼"
end
]]></content>
  <tabTrigger>.live-view-pagination</tabTrigger>
  <scope>source.elixir</scope>
  <description>- Live view pagination and sort module template</description>
</snippet>