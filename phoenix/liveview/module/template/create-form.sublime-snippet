<snippet>
	<content><![CDATA[
defmodule ${1:NameSpaceWeb}.${2:Form}Live do
  use ${1:NameSpaceWeb}, :live_view

  alias ${3:NameSpace}.${4:Context}
  alias ${3:NameSpace}.${4:Context}.${5:Schema}

  def mount(_params, _session, socket) do
    ${6:struct}s = ${4:Context}.list_${6:struct}s()

    changeset = ${4:Context}.change_${6:struct}(%${5:Schema}{})

    socket =
      assign(socket,
        ${6:struct}s: ${6:struct}s,
        changeset: changeset
      )

    {:ok, socket, temporary_assigns: [${6:struct}s: []]}
  end

  def render(assigns) do
    ~L"""
      <h1>Create form/h1>
      <div id="checkin">
        <%= f = form_for @changeset, "#",
          phx_submit: "save",
          phx_change: "validate" %>
          <div class="field">
            <%= text_input f, :name,
              placeholder: "Name",
              autocomplete: "off",
              phx_debounce: 2000 %>
            <%= error_tag f, :name %>
          </div>
          <div class="field">
            <%= telephone_input f, :phone,
              placeholder: "Phone",
              autocomplete: "off",
              phx_debounce: "blur" %>
            <%= error_tag f, :phone %>
          </div>
          <div class="field">
            <%= submit "Save", phx_disable_with: "Saving ..." %>
          </div>
        </form>
        <div id="${6:struct}s" phx-update="prepend">
          <%= for ${6:struct} <- @${6:struct}s do %>
            <div id="${6:struct}<%= ${6:struct}.id %>">
              <div class="name">
                <%= ${6:struct}.name %>
              </div>
              <div class="phone">
                <%= ${6:struct}.phone %>
              </div>
            </div>
          <% end %>
        </div>
      </div>
    """
  end

  def handle_event("save", %{"${6:struct}" => params}, socket) do
    case ${4:Context}.create_${6:struct}(params) do
      {:ok, {6:struct}} ->
        socket = update(socket, :${6:struct}s, &[${6:struct} | &1])

        changeset = ${4:Context}.change_${6:struct}(%{4:Schema}{})
        socket = assign(socket, changeset: changeset)

        :timer.sleep(500)
        {:noreply, socket}

      {:error, %Ecto.Changeset{} = changeset} ->
        socket = assign(socket, changeset: changeset)
        {:noreply, socket}
    end
  end

  def handle_event("validate", %{"${6:struct}" => params}, socket) do
    changeset =
      %{4:Schema}{}
      |> ${4:Context}.change_${6:struct}(params)
      |> Map.put(:action, :insert)

    socket = assign(socket, changeset: changeset)

    {:noreply, socket}
  end
end
]]></content>
  <tabTrigger>pxlvModuleCreate</tabTrigger>
	<scope>source.elixir</scope>
	<description>- Live view create form module template (defmodule)</description>
</snippet>